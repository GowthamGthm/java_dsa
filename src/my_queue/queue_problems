

1) Implement queue data structure
2) Implement queue using stack
3) Implement stack using queue (Assignment)

4) https://leetcode.com/problems/sliding-window-maximum/

Given an array nums, there is a sliding window of size k
which is moving from the very left of the array to the very right.
You can only see the k numbers in the window. Each time the sliding window moves right by
 one position. Return the max sliding window.

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7]
Explanation:

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

5) Connect n ropes with minimum cost
   There are given n ropes of different lengths,
   we need to connect these ropes into one rope.
    The cost to connect two ropes is equal to sum of their lengths.
    We need to connect the ropes with minimum cost.

   For example if we are given 4 ropes of lengths 4, 3, 2 and 6.
   We can connect the ropes in following ways.
   1) First connect ropes of lengths 2 and 3. Now we have three ropes of lengths 4, 6 and 5. => 5
   2) Now connect ropes of lengths 4 and 5. Now we have two ropes of lengths 6 and 9.        => 9
   3) Finally connect the two ropes and all ropes have connected.                            => 15

   Total cost for connecting all ropes is 5 + 9 + 15 = 29. This is the optimized cost for connecting ropes.
   Other ways of connecting ropes would always have same or more cost.
   For example, if we connect 4 and 6 first (we get three strings of 3, 2 and 10),     => 10 + 13 +15
    then connect 10 and 3 (we get two strings of 13 and 2). Finally we connect 13 and 2.
    Total cost in this way is 10 + 13 + 15 = 38.

6) https://leetcode.com/problems/ipo/
Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital,
LeetCode would like to work on some projects to increase its capital before the IPO. Since it has
limited resources,
 it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize
 its total capital
 after finishing at most k distinct projects.

You are given several projects. For each project i, it has a pure profit Pi and a minimum capital of
 Ci is needed to start the corresponding project. Initially, you have W capital.
  When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.

To sum up, pick a list of at most k distinct projects from given projects to maximize your final capital,
and output your final maximized capital.

Example 1:                p1 p2 p3
Input: k=2, W=0, Profits=[1, 2, 3],
                 Capital=[0, 1, 1].

            w=1 + 3
            w=4

Output: 4

Explanation: Since your initial capital is 0, you can only start the project indexed 0.
             After finishing it you will obtain profit 1 and your capital becomes 1.
             With capital 1, you can either start the project indexed 1 or the project indexed 2.
             Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.
             Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.
7) https://www.hackerearth.com/practice/data-structures/trees/heapspriority-queues/practice-problems/algorithm/monk-and-the-magical-candy-bags/
8) https://www.hackerearth.com/practice/data-structures/queues/basics-of-queues/practice-problems/algorithm/little-monk-and-goblet-of-fire/
9) https://leetcode.com/problems/swim-in-rising-water/